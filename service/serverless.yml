service: hoagietools-service

plugins:
  - serverless-api-cloudfront
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-log-retention
frameworkVersion: '2'

custom:
  prune:
    automatic: false
    number: 0
  myStage: ${opt:stage, self:provider.stage}
  myTableName: HoagieTools-${opt:stage, self:provider.stage}
  apiCloudFront:
    domain: hoagietools-svc-${self:custom.myStage}.hoagieman.net
    certificate: arn:aws:acm:us-east-1:796987500533:certificate/34ddd63f-ae46-4812-a2ee-39b9594d8ef2
    compress: true
    headers:
      - Origin
      - Authorization
      - Access-Control-Request-Method
      - Access-Control-Allow-Origin
      - Access-Control-Request-Headers
      - Access-Control-Allow-Credentials
    # Unfortunately, the DefaultTTL must be set manually
  logRetentionInDays: 30 # used to set a global value for all functions

provider:
  name: aws
  runtime: nodejs18.x
  versionFunctions: false
  httpApi:
    cors: true
    authorizers:
      twitch_authenticator:
        type: request
        functionName: twitchAuthenticator
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource:
        Fn::GetAtt:
          - HoagieToolsDatabase
          - Arn
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: arn:aws:events:*:796987500533:event-bus/default
    - Effect: Allow
      Action:
        - 'ecs:DescribeServices'
      Resource: '*'

  environment:
    PERSPECTIVE_API_KEY: ${file(secrets.yml):perspectiveApiKey}

functions:
  twitchAuthenticator:
    handler: auth.twitch_authorizer

  hello:
    handler: hello.hello
    events:
      - http:
          method: GET
          path: /api/hello
          cors: true
          authorizer:
            name: twitchAuthenticator

  detectstreams:
    handler: events.detectstreams
    events:
      - eventBridge:
          pattern:
            source:
              - 'hoagie.twitch-eventsub'
            detail-type:
              - 'Event'
            detail:
              subscription:
                type:
                  - 'stream.online'
    environment:
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}

  chatevalget:
    handler: chatevalHandler.eval
    events:
      - http:
          method: GET
          path: /api/chateval
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      STAGE: ${self:custom.myStage}

  chatevalpost:
    handler: chatevalHandler.eval
    events:
      - http:
          method: POST
          path: /api/chateval
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      STAGE: ${self:custom.myStage}

  twitchwebhook:
    handler: twitch.twitchwebhook
    events:
      - http:
          method: POST
          path: /api/twitchcallback
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      SUBSCRIPTION_SECRET: ${file(secrets.yml):twitchWebhookSecret}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  spotifytoken:
    handler: spotifyplaylist.settoken
    timeout: 10
    events:
      - http:
          method: POST
          path: /api/spotify/settoken
          cors: true
          parameters:
            querystrings:
              username: true
          authorizer:
            name: twitchAuthenticator
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  spotifyplaylist:
    handler: spotifyplaylist.generate
    timeout: 600
    events:
      - http:
          method: POST
          path: /api/spotify/createplaylist
          cors: true
          parameters:
            querystrings:
              username: true
          authorizer:
            name: twitchAuthenticator
#    events:
#      - schedule: rate(24 hours)
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  spotifygetsongs:
    handler: spotify.getsongs
    timeout: 600
    events:
      - http:
          method: POST
          path: /api/spotify/getsongs
          cors: true
          parameters:
            querystrings:
              username: true
          authorizer:
            name: twitchAuthenticator
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  spotifygetsong:
    handler: spotify.getsong
    timeout: 600
    events:
      - http:
          method: GET
          path: /api/spotify/getsong
          cors: true
          parameters:
            querystrings:
              username: true
          authorizer:
            name: twitchAuthenticator
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  songeval:
    handler: songeval.eval
    timeout: 600
    events:
      - http:
          method: GET
          path: /api/songeval/eval
          cors: true
          parameters:
            querystrings:
              username: true
              query: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}
      GENIUS_CLIENT_SECRET: ${file(secrets.yml):geniusClientSecret}
      BAD_WORDS_SECRET: ${file(secrets.yml):badWordsSecret}

  # songevaldotnet:
  #   runtime: dotnet6.0
  #   handler: SongEval::SongEvalFunction.Function::Eval
  #   timeout: 600
  #   events:
  #     - http:
  #         method: GET
  #         path: /api/dotnet/songeval/eval
  #         cors: true
  #         parameters:
  #           querystrings:
  #             username: true
  #             query: true
  #         authorizer:
  #           name: twitchAuthenticator
  #   environment:
  #     TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
  #     TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
  #     STAGE: ${self:custom.myStage}
  #     TABLENAME: ${self:custom.myTableName}
  #     GENIUS_CLIENT_SECRET: ${file(secrets.yml):geniusClientSecret}
  #     BAD_WORDS_SECRET: ${file(secrets.yml):badWordsSecret}

  listsubscriptions:
    handler: twitch.listsubscriptions
    events:
      - http:
          method: GET
          path: /api/listsubscriptions
          parameters:
            querystrings:
              username: true
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}

  createsubscriptions:
    handler: twitch.createsubscriptions
    events:
      - http:
          method: GET
          path: /api/createsubscriptions
          parameters:
            querystrings:
              username: true
              channelname: true
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      SUBSCRIPTION_SECRET: ${file(secrets.yml):twitchWebhookSecret}

  deletesubscription:
    handler: twitch.deletesubscription
    events:
      - http:
          method: POST
          path: /api/deletesubscription
          parameters:
            querystrings:
              id: true
              username: true
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}

  setStreamerSongListToken:
    handler: streamersonglist.settoken
    events:
      - http:
          method: POST
          path: /api/streamersonglist/settoken
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getStreamerSongListStatus:
    handler: streamersonglist.getstatus
    events:
    - http:
        method: GET
        path: /api/streamersonglist/status
        cors: true
        authorizer:
          name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  setBotToken:
    handler: bot.refreshtoken
    events:
      - http:
          method: POST
          path: /api/bot/refreshtoken
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getBotToken:
    handler: bot.gettoken
    events:
      - http:
          method: GET
          path: /api/bot/gettoken
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  botCommand:
    handler: bot.command
    events:
    - http:
        method: GET
        path: /api/bot/command
        cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getraiddata:
    handler: twitch.getraiddata
    events:
      - http:
          method: GET
          path: /api/raiddata
          parameters:
            querystrings:
              username: true
              streamerLogin: true
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getuserinfo:
    handler: twitch.getuserinfo
    events:
      - http:
          method: GET
          path: /api/getuserinfo
          parameters:
            querystrings:
              username: true
              streamerLogin: true
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  streamhistoryV2:
    handler: twitch.streamhistoryV2
    events:
      - http:
          method: GET
          path: /api/v2/streamhistory
          parameters:
            querystrings:
              username: true
              channelname: true
          cors: true
          authorizer:
            name: twitchAuthenticator
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  readsongevalconfig:
    handler: songeval.readconfig
    timeout: 10
    events:
      - http:
          method: GET
          path: /api/songeval/config
          cors: true
          authorizer:
            name: twitchAuthenticator
          parameters:
            querystrings:
              username: true
              streamername: true
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  addwhitelistword:
    handler: songeval.addwhitelistword
    timeout: 10
    events:
      - http:
          method: PUT
          path: /api/songeval/whitelistwords
          cors: true
          parameters:
            querystrings:
              username: true
              streamername: true
              word: true
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  refreshmods:
    handler: twitch.refreshmods
    events:
      - schedule:
        rate: rate(2 hours)
        enabled: false
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getmods:
    handler: twitch.getmods
    events:
      - http:
          method: GET
          path: /api/mods
          cors: true
          authorizer:
            name: twitchAuthenticator
          parameters:
            querystrings:
              streamername: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  addmod:
    handler: twitch.addmod
    events:
      - http:
          method: PUT
          path: /api/addmod
          cors: true
          authorizer:
            name: twitchAuthenticator
          parameters:
            querystrings:
              streamername: true
              username: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  removemod:
    handler: twitch.removemod
    events:
      - http:
          method: PUT
          path: /api/removemod
          cors: true
          authorizer:
            name: twitchAuthenticator
          parameters:
            querystrings:
              streamername: true
              username: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getadminconfig:
    handler: admin.getconfig
    events:
      - http:
          method: GET
          path: /api/admin/config
          parameters:
            querystrings:
              username: true
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}
      
  adminsetstreamers:
    handler: admin.setstreamers
    events:
      - http:
          method: POST
          path: /api/admin/setstreamers
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  adminsetconfig:
    handler: admin.setconfig
    events:
      - http:
          method: POST
          path: /api/admin/setconfig
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getsystemstatus:
    handler: systemstatus.getstatus
    events:
      - http:
          method: GET
          path: /api/admin/system/status
          parameters:
            querystrings:
              streamerName: true
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    HoagieToolsDatabase:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: CategoryKey
            AttributeType: S
          - AttributeName: SubKey
            AttributeType: S
        KeySchema:
          - AttributeName: CategoryKey
            KeyType: HASH
          - AttributeName: SubKey
            KeyType: RANGE
        TableName: ${self:custom.myTableName}
        TimeToLiveSpecification:
          AttributeName: ExpirationTTL
          Enabled: true
        BillingMode: PAY_PER_REQUEST
