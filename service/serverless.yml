service: hoagietools-service

plugins:
  - serverless-api-cloudfront
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
frameworkVersion: '2'

custom:
  myStage: ${opt:stage, self:provider.stage}
  myTableName: HoagieTools-${opt:stage, self:provider.stage}
  apiCloudFront:
    domain: hoagietools-svc-${self:custom.myStage}.hoagieman.net
    certificate: arn:aws:acm:us-east-1:796987500533:certificate/34ddd63f-ae46-4812-a2ee-39b9594d8ef2
    compress: true
    headers:
      - Origin
      - Authorization
      - Access-Control-Request-Method
      - Access-Control-Allow-Origin
      - Access-Control-Request-Headers
      - Access-Control-Allow-Credentials
    # Unfortunately, the DefaultTTL must be set manually

provider:
  name: aws
  runtime: nodejs12.x
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource:
        Fn::GetAtt:
          - HoagieToolsDatabase
          - Arn
  environment:
    PERSPECTIVE_API_KEY: ${file(secrets.yml):perspectiveApiKey}

functions:
  chatevalget:
    handler: chatevalHandler.eval
    events:
      - http:
          method: GET
          path: /api/chateval
          cors: true
    environment:
      STAGE: ${self:custom.myStage}

  chatevalpost:
    handler: chatevalHandler.eval
    events:
      - http:
          method: POST
          path: /api/chateval
          cors: true
    environment:
      STAGE: ${self:custom.myStage}

  twitchwebhook:
    handler: twitch.twitchwebhook
    events:
      - http:
          method: POST
          path: /api/twitchcallback
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      SUBSCRIPTION_SECRET: ${file(secrets.yml):twitchWebhookSecret}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  spotifytoken:
    handler: spotifyplaylist.settoken
    timeout: 10
    events:
      - http:
          method: POST
          path: /api/spotify/settoken
          cors: true
          parameters:
            querystrings:
              username: true
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  spotifyplaylist:
    handler: spotifyplaylist.generate
    timeout: 600
    events:
      - http:
          method: POST
          path: /api/spotify/createplaylist
          cors: true
          parameters:
            querystrings:
              username: true
#    events:
#      - schedule: rate(24 hours)
    environment:
      SPOTIFY_CLIENT_ID: ${file(secrets.yml):spotifyClientId}
      SPOTIFY_CLIENT_SECRET: ${file(secrets.yml):spotifyClientSecret}
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  listsubscriptions:
    handler: twitch.listsubscriptions
    events:
      - http:
          method: GET
          path: /api/listsubscriptions
          parameters:
            querystrings:
              username: true
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}

  createsubscriptions:
    handler: twitch.createsubscriptions
    events:
      - http:
          method: GET
          path: /api/createsubscriptions
          parameters:
            querystrings:
              username: true
              channelname: true
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      SUBSCRIPTION_SECRET: ${file(secrets.yml):twitchWebhookSecret}

  deletesubscription:
    handler: twitch.deletesubscription
    events:
      - http:
          method: POST
          path: /api/deletesubscription
          parameters:
            querystrings:
              id: true
              username: true
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}

  setStreamerSongListToken:
    handler: streamersonglist.settoken
    events:
      - http:
          method: POST
          path: /api/streamersonglist/settoken
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getStreamerSongListStatus:
    handler: streamersonglist.getstatus
    events:
    - http:
        method: GET
        path: /api/streamersonglist/status
        cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

  getraiddata:
    handler: twitch.getraiddata
    events:
      - http:
          method: GET
          path: /api/raiddata
          parameters:
            querystrings:
              username: true
              streamerLogin: true
          cors: true
    environment:
      TWITCH_CLIENT_ID: ${file(secrets.yml):twitchClientId_${opt:stage, 'dev'}}
      TWITCH_CLIENT_SECRET: ${file(secrets.yml):twitchClientSecret_${opt:stage, 'dev'}}
      STAGE: ${self:custom.myStage}
      TABLENAME: ${self:custom.myTableName}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    HoagieToolsDatabase:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: CategoryKey
            AttributeType: S
          - AttributeName: SubKey
            AttributeType: S
        KeySchema:
          - AttributeName: CategoryKey
            KeyType: HASH
          - AttributeName: SubKey
            KeyType: RANGE
        TableName: ${self:custom.myTableName}
        BillingMode: PAY_PER_REQUEST
